/* -----------------------------------------------------------------------------
 *
 * (c) The GHC Team, 1998-2009
 *
 * Bytecode definitions.
 *
 * ---------------------------------------------------------------------------*/

/* --------------------------------------------------------------------------
 * Instructions
 *
 * Notes:
 * o CASEFAIL is generated by the compiler whenever it tests an "irrefutable"
 *   pattern which fails.  If we don't see too many of these, we could
 *   optimise out the redundant test.
 * ------------------------------------------------------------------------*/

/* NOTE:

   THIS FILE IS INCLUDED IN HASKELL SOURCES (ghc/compiler/ghci/ByteCodeGen.lhs).
   DO NOT PUT C-SPECIFIC STUFF IN HERE!

   I hope that's clear :-)
*/

#define bci_STKCHECK  			1
#define bci_PUSH_L    			2
#define bci_PUSH_LL   			3
#define bci_PUSH_LLL  			4
#define bci_PUSH8                       5 
#define bci_PUSH16                      6 
#define bci_PUSH32                      7 
#define bci_PUSH_G                      8 
#define bci_PUSH_ALTS  			9 
#define bci_PUSH_ALTS_P			10
#define bci_PUSH_ALTS_N			11
#define bci_PUSH_ALTS_F			12
#define bci_PUSH_ALTS_D			13
#define bci_PUSH_ALTS_L			14
#define bci_PUSH_ALTS_V			15
#define bci_PUSH_UBX8                   16
#define bci_PUSH_UBX16                  17
#define bci_PUSH_UBX32                  18
#define bci_PUSH_UBX                    19
#define bci_PUSH_APPLY_N                20
#define bci_PUSH_APPLY_F		21
#define bci_PUSH_APPLY_D		22
#define bci_PUSH_APPLY_L		23
#define bci_PUSH_APPLY_V		24
#define bci_PUSH_APPLY_P		25
#define bci_PUSH_APPLY_PP		26
#define bci_PUSH_APPLY_PPP		27
#define bci_PUSH_APPLY_PPPP		28
#define bci_PUSH_APPLY_PPPPP		29
#define bci_PUSH_APPLY_PPPPPP		30
/* #define bci_PUSH_APPLY_PPPPPPP       31 */
#define bci_SLIDE     			32
#define bci_ALLOC_AP   			33
#define bci_ALLOC_AP_NOUPD		34
#define bci_ALLOC_PAP  			35
#define bci_MKAP      			36
#define bci_MKPAP      			37
#define bci_UNPACK    			38
#define bci_PACK      			39
#define bci_TESTLT_I   			40
#define bci_TESTEQ_I  			41
#define bci_TESTLT_F  			42
#define bci_TESTEQ_F  			43
#define bci_TESTLT_D  			44
#define bci_TESTEQ_D  			45
#define bci_TESTLT_P  			46
#define bci_TESTEQ_P  			47
#define bci_CASEFAIL  			48
#define bci_JMP       			49
#define bci_CCALL     			50
#define bci_SWIZZLE   			51
#define bci_ENTER     			52
#define bci_RETURN    			53
#define bci_RETURN_P 			54
#define bci_RETURN_N 			55
#define bci_RETURN_F 			56
#define bci_RETURN_D                    57
#define bci_RETURN_L                    58
#define bci_RETURN_V                    59
#define bci_BRK_FUN                     60
#define bci_TESTLT_W                    61
#define bci_TESTEQ_W                    62
/* If you need to go past 255 then you will run into the flags */

/* If you need to go below 0x0100 then you will run into the instructions */
#define bci_FLAG_LARGE_ARGS     0x8000

/* If a BCO definitely requires less than this many words of stack,
   don't include an explicit STKCHECK insn in it.  The interpreter
   will check for this many words of stack before running each BCO,
   rendering an explicit check unnecessary in the majority of
   cases. */
#define INTERP_STACK_CHECK_THRESH  50

/*-------------------------------------------------------------------------*/
